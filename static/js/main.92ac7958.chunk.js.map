{"version":3,"sources":["components/NavButton.js","views/CharacterCreator.js","static_data/homeworlds.js","views/Homeworlds.js","views/Characteristics.js","App.js","serviceWorker.js","index.js"],"names":["NavButton","props","react_default","a","createElement","Button","Object","assign","component","Link","children","CharacterCreator","components_NavButton","to","homeworlds","name","modifiers","characteristic","sign","fate","threshold","emperors_blessing","bonus","text","aptitude","wounds","Homeworlds","_React$useState","React","useState","homeworld","_React$useState2","slicedToArray","selected","setSelected","Table","TableHead","TableRow","TableCell","TableBody","map","world","isRowSelected","undefined","hover","onClick","event","setHomeworld","handleClick","key","modifier","Tooltip","title","disabled","Characteristics","woundsRolled","setWoundsRolled","_React$useState3","_React$useState4","setWounds","_React$useState5","_React$useState6","fateRolled","setFateRolled","_React$useState7","_React$useState8","setFate","Grid","container","item","xs","TextField","id","type","value","Math","floor","random","roll","console","log","rollForFate","App","react_router_dom","react_router","path","exact","render","views_Homeworlds","views_Characteristics","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92ac7958.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction NavButton(props) {\r\n  return(\r\n    <Button component={Link} {...props} >\r\n      {props.children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default NavButton;","import React from 'react';\r\nimport NavButton from '../components/NavButton';\r\n\r\nfunction CharacterCreator() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        Welcome to Dark Heresy 2nd Edtion Character Creator.\r\n      </p>\r\n      <NavButton to={\"/homeworlds\"}>\r\n        Start creating!\r\n      </NavButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCreator;","export default [\r\n    {\r\n      \"name\": \"Feral World\",\r\n      \"modifiers\": [\r\n        {\r\n          \"characteristic\": \"strength\",\r\n          \"sign\": \"+\"\r\n        },\r\n        {\r\n          \"characteristic\": \"toughness\",\r\n          \"sign\": \"+\"\r\n        },\r\n        {\r\n          \"characteristic\": \"influence\",\r\n          \"sign\": \"-\"\r\n        }\r\n      ],\r\n      \"fate\": {\r\n        \"threshold\": 2,\r\n        \"emperors_blessing\": 3\r\n      },\r\n      \"bonus\": {\r\n        \"name\": \"The Old Ways\",\r\n        \"text\": \"In the hands of a feral world character, any Low-Tech weapon loses the Primitive quality (if it had it) and gains the Proven (3) quality.\"\r\n      },\r\n      \"aptitude\": \"toughness\",\r\n      \"wounds\": 9\r\n    },\r\n    {\r\n      \"name\": \"Forge World\",\r\n      \"modifiers\": [\r\n        {\r\n          \"characteristic\": \"intelligence\",\r\n          \"sign\": \"+\"\r\n        },\r\n        {\r\n          \"characteristic\": \"toughness\",\r\n          \"sign\": \"+\"\r\n        },\r\n        {\r\n          \"characteristic\": \"fellowship\",\r\n          \"sign\": \"-\"\r\n        }\r\n      ],\r\n      \"fate\": {\r\n        \"threshold\": 3,\r\n        \"emperors_blessing\": 8\r\n      },\r\n      \"bonus\": {\r\n        \"name\": \"Omnissiahâ€™s Chosen\",\r\n        \"text\": \"A forge world character starts with either the Technical Knock or Weapon-Tech talent.\"\r\n      },\r\n      \"aptitude\": \"intelligence\",\r\n      \"wounds\": 8\r\n    }\r\n  ];","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport NavButton from '../components/NavButton';\r\n\r\nimport homeworlds from '../static_data/homeworlds';\r\n\r\nfunction Homeworlds(props) {\r\n  const [selected, setSelected] = React.useState(props.homeworld);\r\n\r\n  function handleClick(event, world) {\r\n    setSelected(world);\r\n    props.setHomeworld(world);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n      Select your homeworld\r\n      </header>\r\n      \r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>World</TableCell>\r\n            <TableCell>Characterstic Modifiers</TableCell>\r\n            <TableCell>Fate Threshold</TableCell>\r\n            <TableCell>Bonus</TableCell>\r\n            <TableCell>Aptitude</TableCell>\r\n            <TableCell>Wounds</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            homeworlds.map(world => {\r\n              const isRowSelected = (selected !== undefined) && (world.name === selected.name);\r\n              return(\r\n                <TableRow\r\n                  hover\r\n                  onClick={event => handleClick(event, world)}\r\n                  key={world.name}\r\n                  selected={isRowSelected}\r\n                >\r\n                  <TableCell>\r\n                    {world.name}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {\r\n                      world.modifiers.map(modifier => (\r\n                        <div>\r\n                          {modifier.sign + modifier.characteristic}\r\n                        </div>\r\n                      ))\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {world.fate.threshold} (Emperor's Blessing: {world.fate.emperors_blessing}+)\r\n                  </TableCell>\r\n                  <Tooltip title={world.bonus.text}>\r\n                    <TableCell>\r\n                      {world.bonus.name}\r\n                    </TableCell>\r\n                  </Tooltip>\r\n                  <TableCell>\r\n                    {world.aptitude}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {world.wounds}+1d5\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n            })\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n      <NavButton to={\"/\"}>\r\n        Back\r\n      </NavButton>\r\n      <NavButton disabled={selected === undefined} to={\"/characteristics\"} >\r\n        Characteristics\r\n      </NavButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homeworlds;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NavButton from '../components/NavButton';\r\n\r\nfunction Characteristics(props) {\r\n  const [woundsRolled, setWoundsRolled] = React.useState(false);\r\n  const [wounds, setWounds] = React.useState(undefined);\r\n\r\n  const [fateRolled, setFateRolled] = React.useState(false);\r\n  const [fate, setFate] = React.useState(undefined);\r\n\r\n  const characteristics = [\r\n    \"weapon_skill\",\r\n    \"ballistic_skill\",\r\n    \"strength\",\r\n    \"toughness\",\r\n    \"agility\",\r\n    \"intelligence\",\r\n    \"perception\",\r\n    \"willpower\",\r\n    \"fellowship\",\r\n    \"influence\"\r\n  ]\r\n\r\n  function rollForWounds() {\r\n    setWounds(Math.floor(Math.random() * 5) + 1 + props.homeworld.wounds);\r\n    setWoundsRolled(true);  \r\n  }\r\n\r\n  function rollForFate() {\r\n    const roll = Math.floor(Math.random() * 10) + 1;\r\n    console.log(roll);\r\n    console.log(props.homeworld.fate.emperors_blessing)\r\n    if (roll >= props.homeworld.fate.emperors_blessing) {\r\n      setFate(props.homeworld.fate.threshold + 1);\r\n    } else {\r\n      setFate(props.homeworld.fate.threshold);\r\n    }\r\n\r\n    setFateRolled(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        {\r\n          characteristics.map(characteristic => (\r\n            <Grid item xs={6}>\r\n              {characteristic}\r\n              <TextField\r\n                id={characteristic}\r\n                type=\"number\"\r\n              />\r\n            </Grid>\r\n          ))\r\n        }\r\n      </Grid>\r\n\r\n      <div>\r\n        Wounds\r\n        <TextField id=\"wounds\" disabled type=\"number\" value={wounds} />\r\n        <Button disabled={woundsRolled} onClick={() => { rollForWounds(); }}>\r\n          Roll for wounds!\r\n        </Button>\r\n      </div>\r\n\r\n      <div>\r\n        Fate threshold\r\n        <TextField id=\"fate\" disabled type=\"number\" value={fate} />\r\n        <Button disabled={fateRolled} onClick={() => { rollForFate(); }}>\r\n          Roll for Emperor's Blessing!\r\n        </Button>\r\n      </div>\r\n\r\n      <NavButton to={\"/homeworlds\"}>\r\n        Back\r\n      </NavButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Characteristics;","import React from 'react';\nimport './App.css';\nimport CharacterCreator from './views/CharacterCreator';\nimport Homeworlds from './views/Homeworlds';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Characteristics from './views/Characteristics';\n\nfunction App() {\n  const [homeworld, setHomeworld] = React.useState(undefined);\n\n  return (\n    <Router>\n      <Route path=\"/\" exact component={CharacterCreator} />\n      <Route path=\"/homeworlds/\" render={(props) => <Homeworlds {...props} homeworld={homeworld} setHomeworld={setHomeworld}/>} />\n      <Route path=\"/characteristics/\" render={(props) => <Characteristics {...props} homeworld={homeworld}/>} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}